/*
$Id$
Copyright (C) 2009-2010, The Perl Foundation.

=head1 NAME

src/pmc/p6lowlevelsig.pmc - Perl 6 Low Level Signature PMC

=head1 DESCRIPTION

This PMC stores the low-level representation of a Perl 6 signature.

=back

=head1 FUNCTIONS

These are worker functions used by the methods of the PMC, and not visible
from the outside.

=over 4

*/

#include "../binder/bind.h"

/*

=back

=head1 ATTRIBUTES

=over 4

=item elements

Array of pointers to llsig_element structs specifying details of the elements
of the signature.

=item num_elements

The number of items we have inside the signature.

=back

=head1 METHODS

=over 4

=cut

*/

pmclass P6LowLevelSig dynpmc group perl6_group manual_attrs {
    ATTR struct llsig_element **elements;
    ATTR INTVAL                 num_elements;
    ATTR PMC                   *named_to_pos_cache;

/*

=item VTABLE void init()

Allocates the PMC's underlying storage.

=cut

*/
    VTABLE void init() {
        /* Allocate the underlying struct and initialize it. */
        PMC_data(SELF) = mem_allocate_zeroed_typed(Parrot_P6LowLevelSig_attributes);

        /* Need custom mark and destroy. */
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    VTABLE void init_int(INTVAL init) {
        llsig_element **elements;
        INTVAL i;

        SELF.init();

        elements = mem_gc_allocate_n_zeroed_typed(INTERP, init + 1,
             llsig_element *);

        for (i = 0; i < init; i++)
            elements[i] = mem_gc_allocate_zeroed_typed(INTERP, llsig_element);

        elements[init] = NULL;

        SETATTR_P6LowLevelSig_elements(interp, SELF, elements);
        SETATTR_P6LowLevelSig_num_elements(interp, SELF, init);
    }

/*

=item VTABLE void destroy()

Frees the memory associated with this PMC's underlying storage.

=cut

*/
    VTABLE void destroy() {
        llsig_element **elements;
        INTVAL        num_elements, i;

        /* Free element structs. */
        GETATTR_P6LowLevelSig_elements(interp, SELF, elements);
        GETATTR_P6LowLevelSig_num_elements(interp, SELF, num_elements);
        for (i = 0; i < num_elements; i++)
            if (elements[i]) {
                mem_sys_free(elements[i]);
                elements[i] = NULL;
            }

        if (elements)
            mem_sys_free(elements);

        /* Now free underlying struct. */
        mem_sys_free(PMC_data(SELF));
        PMC_data(SELF) = NULL;
    }


/*

=item C<VTABLE void mark()>

Marks anything we're referencing.

=cut

*/
    VTABLE void mark() {
        llsig_element **elements;
        INTVAL        num_elements, i;
        PMC           *named_to_pos_cache;

        /* Mark everything referenced form the elements structs. */
        GETATTR_P6LowLevelSig_elements(interp, SELF, elements);
        GETATTR_P6LowLevelSig_num_elements(interp, SELF, num_elements);
        GETATTR_P6LowLevelSig_named_to_pos_cache(interp, SELF, named_to_pos_cache);
        if (named_to_pos_cache)
            Parrot_gc_mark_PMC_alive(interp, named_to_pos_cache);
        for (i = 0; i < num_elements; i++) {
            if (!elements[i])
                continue;
            if (elements[i]->variable_name)
                Parrot_gc_mark_STRING_alive(interp, elements[i]->variable_name);
            if (elements[i]->named_names)
                Parrot_gc_mark_PMC_alive(interp, elements[i]->named_names);
            if (elements[i]->type_captures)
                Parrot_gc_mark_PMC_alive(interp, elements[i]->type_captures);
            if (elements[i]->nominal_type)
                Parrot_gc_mark_PMC_alive(interp, elements[i]->nominal_type);
            if (elements[i]->post_constraints)
                Parrot_gc_mark_PMC_alive(interp, elements[i]->post_constraints);
            if (elements[i]->sub_signature)
                Parrot_gc_mark_PMC_alive(interp, elements[i]->sub_signature);
            if (elements[i]->coerce_to)
                Parrot_gc_mark_STRING_alive(interp, elements[i]->coerce_to);
        }
    }

/*

=item C<void *get_pointer()>

Returns a pointer to the signautre binder.
=cut

*/

    VTABLE void *get_pointer() {
        return (void *) &Rakudo_binding_bind_signature;
    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
